// ==UserScript==
// @name         WhatsApp Web Auto Sender
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  Automatically send messages to multiple WhatsApp numbers
// @author       @Saria Hmz
// @match        https://web.whatsapp.com/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Create UI elements
    function createUI() {
        // Add custom fonts
        const fontLink = document.createElement('link');
        fontLink.href = 'https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap';
        fontLink.rel = 'stylesheet';
        document.head.appendChild(fontLink);

        // Create the main button that matches WhatsApp's design
        const mainButton = document.createElement('button');
        mainButton.className = 'x78zum5 x6s0dn4 x1afcbsf x1heor9g x1y1aw1k x1sxyh0 xwib8y2 xurb0ha';
        mainButton.setAttribute('role', 'button');
        mainButton.setAttribute('tabindex', '0');
        mainButton.setAttribute('title', 'Auto Sender');
        mainButton.innerHTML = `
            <span aria-hidden="true" data-icon="auto-sender" class="">
                <svg viewBox="0 0 24 24" height="24" width="24" preserveAspectRatio="xMidYMid meet" class="" fill="none">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.58 20 4 16.42 4 12C4 7.58 7.58 4 12 4C16.42 4 20 7.58 20 12C20 16.42 16.42 20 12 20ZM16 11H13V8C13 7.45 12.55 7 12 7C11.45 7 11 7.45 11 8V11H8C7.45 11 7 11.45 7 12C7 12.55 7.45 13 8 13H11V16C11 16.55 11.45 17 12 17C12.55 17 13 16.55 13 16V13H16C16.55 13 17 12.55 17 12C17 11.45 16.55 11 16 11Z" fill="currentColor"/>
                </svg>
            </span>
        `;

        // Create the sliding panel
        const panel = document.createElement('div');
        panel.style.cssText = `
            position: fixed;
            top: 0;
            right: -350px;
            width: 320px;
            height: 100vh;
            background: rgb(32, 44, 51);
            padding: 20px;
            z-index: 999;
            transition: transform 0.3s ease;
            box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
            color: white;
            font-family: 'Inter', sans-serif;
        `;

        // Add title
        const title = document.createElement('h2');
        title.textContent = 'WhatsApp Auto Sender';
        title.style.cssText = `
            margin: 0 0 20px 0;
            color: #fff;
            font-size: 16px;
            font-weight: 600;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        `;

        const textarea = document.createElement('textarea');
        textarea.id = 'phone-numbers';
        textarea.placeholder = 'Enter phone numbers (one per line)';
        textarea.style.cssText = `
            width: 100%;
            height: 150px;
            margin-bottom: 15px;
            padding: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-family: 'Inter', sans-serif;
            font-size: 14px;
            resize: none;
            transition: all 0.3s ease;
            box-sizing: border-box;
        `;

        const messageInput = document.createElement('input');
        messageInput.id = 'message-text';
        messageInput.type = 'text';
        messageInput.placeholder = 'Enter message';
        messageInput.style.cssText = `
            width: 100%;
            margin-bottom: 15px;
            padding: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-family: 'Inter', sans-serif;
            font-size: 14px;
            transition: all 0.3s ease;
            box-sizing: border-box;
        `;

        // Create status counter
        const statusDiv = document.createElement('div');
        statusDiv.id = 'status-counter';
        statusDiv.style.cssText = `
            margin-bottom: 15px;
            font-size: 13px;
            color: rgba(255, 255, 255, 0.7);
            text-align: center;
            display: none;
        `;

        const button = document.createElement('button');
        button.textContent = 'Send Messages';
        button.style.cssText = `
            background: #00a884;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            width: 100%;
            font-family: 'Inter', sans-serif;
            font-weight: 500;
            font-size: 14px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        `;

        // Add hover effects
        button.onmouseover = () => {
            button.style.background = '#02916f';
        };
        button.onmouseout = () => {
            button.style.background = '#00a884';
        };

        // Add focus effects for inputs
        [textarea, messageInput].forEach(input => {
            input.onfocus = () => {
                input.style.borderColor = '#00a884';
                input.style.background = 'rgba(255, 255, 255, 0.15)';
            };
            input.onblur = () => {
                input.style.borderColor = 'rgba(255, 255, 255, 0.1)';
                input.style.background = 'rgba(255, 255, 255, 0.1)';
            };
        });

        button.onclick = () => {
            statusDiv.style.display = 'block';
            startSending();
        };

        panel.appendChild(title);
        panel.appendChild(textarea);
        panel.appendChild(messageInput);
        panel.appendChild(statusDiv);
        panel.appendChild(button);
        document.body.appendChild(panel);

        // Toggle panel visibility
        let isPanelVisible = false;
        mainButton.onclick = () => {
            isPanelVisible = !isPanelVisible;
            panel.style.transform = isPanelVisible ? 'translateX(-350px)' : 'translateX(0)';
            mainButton.style.background = isPanelVisible ? 'rgba(255, 255, 255, 0.1)' : '';
        };

        // Watch for the navigation buttons container and add our button
        const observer = new MutationObserver((mutations, obs) => {
            const container = document.querySelector('.x1c4vz4f.xs83m0k.xdl72j9.x1g77sc7.xeuugli.x2lwn1j.xozqiw3.x1oa3qoh.x12fk4p8');
            if (container) {
                const buttonWrapper = document.createElement('div');
                buttonWrapper.className = '_ajv7 x1n2onr6 x1okw0bk x5yr21d x14yjl9h xudhj91 x18nykt9 xww2gxu xlkovuz x16j0l1c xyklrzc x1mh8g0r x1anpbxc x18wx58x xo92w5m';
                buttonWrapper.appendChild(mainButton);
                container.appendChild(buttonWrapper);
                obs.disconnect();
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }

    // Helper function to wait for element
    function waitForElement(selector, timeout = 5000) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();

            const interval = setInterval(() => {
                const element = document.querySelector(selector);
                if (element) {
                    clearInterval(interval);
                    resolve(element);
                } else if (Date.now() - startTime > timeout) {
                    clearInterval(interval);
                    reject(new Error(`Element ${selector} not found`));
                }
            }, 100);
        });
    }

    // Function to simulate click
    function simulateClick(element) {
        element.click();
    }

    // Function to simulate typing
    async function simulateTyping(element, text) {
        // Wait for the contenteditable div to be ready
        await new Promise(resolve => setTimeout(resolve, 500));

        // Find the contenteditable div inside the message container
        const contentEditableDiv = element.querySelector('div[contenteditable="true"][role="textbox"]');
        if (!contentEditableDiv) return;

        // Focus the element
        contentEditableDiv.focus();

        // Create and dispatch keyboard events
        const keyboardEvent = new KeyboardEvent('keydown', {
            key: 'a',
            code: 'KeyA',
            bubbles: true
        });
        contentEditableDiv.dispatchEvent(keyboardEvent);

        // Set text content with the correct class structure
        contentEditableDiv.innerHTML = `<p class="selectable-text copyable-text x15bjb6t x1n2onr6" style="text-indent: 0px; margin-top: 0px; margin-bottom: 0px;">${text}</p>`;

        // Dispatch input event
        const inputEvent = new InputEvent('input', {
            bubbles: true,
            cancelable: true,
            inputType: 'insertText',
            data: text
        });
        contentEditableDiv.dispatchEvent(inputEvent);

        // Wait to ensure events are processed
        await new Promise(resolve => setTimeout(resolve, 500));
    }

    // Main function to process numbers
    async function startSending() {
        const numbers = document.getElementById('phone-numbers').value.split('\n').filter(n => n.trim());
        const message = document.getElementById('message-text').value;
        const statusDiv = document.getElementById('status-counter');
        const button = statusDiv.nextElementSibling;
        let successCount = 0;

        button.disabled = true;
        button.style.opacity = '0.7';
        button.textContent = 'Sending...';

        for (let i = 0; i < numbers.length; i++) {
            const number = numbers[i];
            statusDiv.textContent = `Processing: ${i + 1}/${numbers.length} (${successCount} sent)`;

            try {
                // Click new chat button
                const newChatButton = await waitForElement('#startNonContactChat');
                simulateClick(newChatButton);

                // Wait for and fill phone number input
                const phoneInput = await waitForElement('.alerty-prompt input');
                phoneInput.value = number.trim();
                phoneInput.dispatchEvent(new Event('input', { bubbles: true }));

                // Click chat button
                const chatButton = await waitForElement('.btn-ok');
                simulateClick(chatButton);

                // Wait for chat to load
                await new Promise(resolve => setTimeout(resolve, 450));

                // Wait for message input container and type message
                const messageContainer = await waitForElement('.x9f619.x12lumcd.x1qrby5j');
                await simulateTyping(messageContainer, message);

                // Wait for send button to become active
                await new Promise(resolve => setTimeout(resolve, 100));

                // Click send button
                const sendButton = await waitForElement('button[aria-label="Send"]');
                simulateClick(sendButton);

                // Wait before processing next number
                await new Promise(resolve => setTimeout(resolve, 500));

                successCount++;
            } catch (error) {
                console.error(`Error processing number ${number}:`, error);
                continue;
            }
        }

        statusDiv.textContent = `Completed: ${successCount}/${numbers.length} messages sent successfully`;
        button.disabled = false;
        button.style.opacity = '1';
        button.textContent = 'Send Messages';
    }

    // Initialize when page is ready
    window.addEventListener('load', () => {
        setTimeout(createUI, 3000); // Wait for WhatsApp Web to load
    });
})();
